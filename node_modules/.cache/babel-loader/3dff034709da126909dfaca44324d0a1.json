{"ast":null,"code":"var _jsxFileName = \"C:\\\\frontend-total-performance\\\\total-recipes\\\\src\\\\Components\\\\RecipeList\\\\index.js\";\nimport React, { Component } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Recipe from '../Recipe';\nimport PropTypes from 'prop-types';\nimport getRecipes from './../../services/getRecipes';\nimport './styles.css';\n\nconst RecipeList = ({\n  data\n}) => {\n  return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 9\n    }\n  }, \"la data es \", data.recipes);\n};\n\nexport default RecipeList;\n/*\r\nclass RecipeList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        const {textToSearch, data} = props\r\n        \r\n        this.state = {\r\n            textToSearch,\r\n            data\r\n        }\r\n        console.log(this.state.data)\r\n    }\r\n\r\n    // searchRecipes = (textToSearch) => {\r\n    //      fetch(getRecipes(textToSearch)).then( resolve => {\r\n    //          return resolve.json()\r\n    //      }).then(data => {\r\n    //           this.setState({\r\n    //               data\r\n    //           })\r\n    //      })\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this.searchRecipes(this.props.textToSearch)\r\n    // }\r\n\r\n    render() {\r\n        \r\n        // const {data} = this.state\r\n\r\n        // if (data) {\r\n        //     let recipes = data.recipes.map((recipe) => recipe)\r\n        // }\r\n\r\n        return (\r\n            <>\r\n                {/* { data ? data.recipes.map((recipe) => ( <Recipe recipe={recipe} key={recipe.name}></Recipe> )) : <CircularProgress size={80} /> }  *}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// RecipeList.propTypes = {\r\n//     textToSearch: PropTypes.string.isRequired,\r\n// };\r\n*/","map":{"version":3,"sources":["C:/frontend-total-performance/total-recipes/src/Components/RecipeList/index.js"],"names":["React","Component","CircularProgress","Recipe","PropTypes","getRecipes","RecipeList","data","recipes"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAO,cAAP;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAE3B,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAgBA,IAAI,CAACC,OAArB,CADJ;AAGH,CALD;;AAOA,eAAeF,UAAf;AACA","sourcesContent":["import React, { Component } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Recipe from '../Recipe'\r\nimport PropTypes from 'prop-types';\r\nimport getRecipes from './../../services/getRecipes'\r\nimport './styles.css'\r\n\r\nconst RecipeList = ({data}) => {\r\n\r\n    return (\r\n        <h1>la data es {data.recipes}</h1>\r\n    )\r\n}\r\n\r\nexport default RecipeList;\r\n/*\r\nclass RecipeList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        const {textToSearch, data} = props\r\n        \r\n        this.state = {\r\n            textToSearch,\r\n            data\r\n        }\r\n        console.log(this.state.data)\r\n    }\r\n\r\n    // searchRecipes = (textToSearch) => {\r\n    //      fetch(getRecipes(textToSearch)).then( resolve => {\r\n    //          return resolve.json()\r\n    //      }).then(data => {\r\n    //           this.setState({\r\n    //               data\r\n    //           })\r\n    //      })\r\n    // }\r\n\r\n    // componentDidMount(){\r\n    //     this.searchRecipes(this.props.textToSearch)\r\n    // }\r\n\r\n    render() {\r\n        \r\n        // const {data} = this.state\r\n\r\n        // if (data) {\r\n        //     let recipes = data.recipes.map((recipe) => recipe)\r\n        // }\r\n\r\n        return (\r\n            <>\r\n                {/* { data ? data.recipes.map((recipe) => ( <Recipe recipe={recipe} key={recipe.name}></Recipe> )) : <CircularProgress size={80} /> }  *}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n// RecipeList.propTypes = {\r\n//     textToSearch: PropTypes.string.isRequired,\r\n// };\r\n*/"]},"metadata":{},"sourceType":"module"}