{"ast":null,"code":"var _jsxFileName = \"C:\\\\frontend-total-performance\\\\total-recipes\\\\src\\\\Components\\\\RecipeList\\\\index.js\";\nimport React, { Component } from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Recipe from './Recipe';\nimport PropTypes from 'prop-types';\nimport getRecipes from './../../services/getRecipes';\nimport './styles.css';\n\nclass RecipeList extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchRecipes = textToSearch => {\n      //console.log(\"log\", textToSearch)\n      fetch(getRecipes()).then(resolve => {\n        return resolve.json();\n      }).then(data => {\n        this.setState({\n          data\n        });\n      });\n    };\n\n    const {\n      textToSearch\n    } = props;\n    this.state = {\n      textToSearch,\n      data: null\n    };\n  }\n\n  componentDidMount() {\n    this.searchRecipes(this.props.textToSearch);\n  }\n\n  render() {\n    const {\n      data\n    } = this.state;\n\n    if (data) {\n      let recipes = data.recipes.map(recipe => recipe); //console.log(recipes)\n    }\n\n    return /*#__PURE__*/React.createElement(React.Fragment, null, data ? data.recipes.map(recipe => /*#__PURE__*/React.createElement(Recipe, {\n      recipe: recipe,\n      key: recipe.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 57\n      }\n    })) : /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 80,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 114\n      }\n    }));\n  }\n\n}\n\nRecipeList.propTypes = {\n  textToSearch: PropTypes.string.isRequired\n};\nexport default RecipeList;","map":{"version":3,"sources":["C:/frontend-total-performance/total-recipes/src/Components/RecipeList/index.js"],"names":["React","Component","CircularProgress","Recipe","PropTypes","getRecipes","RecipeList","constructor","props","searchRecipes","textToSearch","fetch","then","resolve","json","data","setState","state","componentDidMount","render","recipes","map","recipe","name","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAO,cAAP;;AAEA,MAAMC,UAAN,SAAyBL,SAAzB,CAAmC;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAWlBC,aAXkB,GAWDC,YAAD,IAAkB;AAC9B;AACCC,MAAAA,KAAK,CAACN,UAAU,EAAX,CAAL,CAAoBO,IAApB,CAA0BC,OAAO,IAAI;AACjC,eAAOA,OAAO,CAACC,IAAR,EAAP;AACH,OAFD,EAEGF,IAFH,CAEQG,IAAI,IAAI;AACX,aAAKC,QAAL,CAAc;AACVD,UAAAA;AADU,SAAd;AAGJ,OAND;AAOJ,KApBiB;;AAGd,UAAM;AAACL,MAAAA;AAAD,QAAiBF,KAAvB;AAEA,SAAKS,KAAL,GAAa;AACTP,MAAAA,YADS;AAETK,MAAAA,IAAI,EAAE;AAFG,KAAb;AAIH;;AAaDG,EAAAA,iBAAiB,GAAE;AACf,SAAKT,aAAL,CAAmB,KAAKD,KAAL,CAAWE,YAA9B;AACH;;AAEDS,EAAAA,MAAM,GAAG;AAEL,UAAM;AAACJ,MAAAA;AAAD,QAAS,KAAKE,KAApB;;AAEA,QAAIF,IAAJ,EAAU;AACN,UAAIK,OAAO,GAAGL,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,MAAD,IAAYA,MAA7B,CAAd,CADM,CAEN;AACH;;AAED,wBACI,0CACMP,IAAI,GAAGA,IAAI,CAACK,OAAL,CAAaC,GAAb,CAAkBC,MAAD,iBAAc,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAEA,MAAhB;AAAwB,MAAA,GAAG,EAAEA,MAAM,CAACC,IAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA/B,CAAH,gBAA2F,oBAAC,gBAAD;AAAkB,MAAA,IAAI,EAAE,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADrG,CADJ;AAKH;;AAzC8B;;AA4CnCjB,UAAU,CAACkB,SAAX,GAAuB;AACnBd,EAAAA,YAAY,EAAEN,SAAS,CAACqB,MAAV,CAAiBC;AADZ,CAAvB;AAIA,eAAepB,UAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Recipe from './Recipe'\r\nimport PropTypes from 'prop-types';\r\nimport getRecipes from './../../services/getRecipes'\r\nimport './styles.css'\r\n\r\nclass RecipeList extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\r\n        const {textToSearch} = props\r\n\r\n        this.state = {\r\n            textToSearch,\r\n            data: null\r\n        }\r\n    }\r\n\r\n    searchRecipes = (textToSearch) => {\r\n        //console.log(\"log\", textToSearch)\r\n         fetch(getRecipes()).then( resolve => {\r\n             return resolve.json()\r\n         }).then(data => {\r\n              this.setState({\r\n                  data\r\n              })\r\n         })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.searchRecipes(this.props.textToSearch)\r\n    }\r\n\r\n    render() {\r\n        \r\n        const {data} = this.state\r\n        \r\n        if (data) {\r\n            let recipes = data.recipes.map((recipe) => recipe)\r\n            //console.log(recipes)\r\n        }\r\n\r\n        return (\r\n            <>\r\n                { data ? data.recipes.map((recipe) => ( <Recipe recipe={recipe} key={recipe.name}></Recipe> )) : <CircularProgress size={80} /> } \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nRecipeList.propTypes = {\r\n    textToSearch: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default RecipeList;"]},"metadata":{},"sourceType":"module"}