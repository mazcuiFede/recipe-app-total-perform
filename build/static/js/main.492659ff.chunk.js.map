{"version":3,"sources":["logo.svg","constants/api_url.js","services/putRecipeCalificationUrl.js","Components/Recipe/RecipeScore.js","Components/Recipe/Ingredients.js","services/operations.js","Components/Recipe/index.js","Components/RecipeList/index.js","Components/RecipeSearch/index.js","services/getRecipesUrl.js","Components/RecipeSearchButtons/index.js","Components/RecipesScreen/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url_base_api_recipe","putRecipeCalificationUrl","id","calification","RecipeScore","props","handleChange","event","setState","rateValue","target","value","state","messageRate","bind","handleSubmit","this","fetch","putRecipeCalification","Form","Group","as","Row","xs","Control","onChange","Button","variant","onClick","className","Component","Ingredients","ingredients","servings","Card","Text","type","Body","map","recipe","key","name","quantity","unit","average","arr","reduce","p","c","parseInt","length","toFixed","Recipe","imageURL","steps","_id","showModal","sm","Img","src","Title","handleModal","numberOfStar","numberOfSelectedStar","colorEmptyStar","starSize","spaceBetweenStar","Modal","show","size","Header","onRate","Footer","RecipeList","data","recipes","CircularProgress","RecipeSearch","searchRecipes","Label","placeholder","getRecipesUrl","textToSearch","RecipeSearchButtons","searchRecipesByRate","Recipes","e","then","resolve","json","ary","dataResult","includes","push","md","App","Container","logo","alt","RecipesScreen","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.492659ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const url_base_api_recipe = \"https://api-rest-total-p.herokuapp.com/api\" //\"http://localhost:3001/api\"","import { url_base_api_recipe } from '../constants/api_url'\r\n\r\nconst putRecipeCalificationUrl = (id, calification) => {\r\n    return `${url_base_api_recipe}/recipe/${id}/setcalification/${calification}`\r\n}\r\n\r\nexport default putRecipeCalificationUrl","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\nimport { Row, Col } from 'react-flexbox-grid'\r\nimport putRecipeCalification from '../../services/putRecipeCalificationUrl'\r\nimport './styles.css'\r\n\r\nclass RecipeScore extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        const { id } = this.props\r\n\r\n        this.state = {\r\n            id,\r\n            rateValue: '1',\r\n            messageRate: ''\r\n        };\r\n    \r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n    \r\n      handleChange =(event) => {\r\n        this.setState({rateValue: event.target.value});\r\n      }\r\n    \r\n    handleSubmit() {\r\n        let {id, rateValue } = this.state\r\n        fetch(putRecipeCalification(id, rateValue))\r\n        this.setState({\r\n            messageRate: 'Your rate was sent!'\r\n        })\r\n    }\r\n      \r\n      render() {\r\n        return (\r\n            <Form>\r\n                <Form.Group as={Row}>\r\n                    <Col xs={8}>\r\n                        <Form.Control as=\"select\" value={this.state.value} onChange={this.handleChange}>\r\n                            <option>1</option>\r\n                            <option>2</option>\r\n                            <option>3</option>\r\n                            <option>4</option>\r\n                            <option>5</option>\r\n                        </Form.Control>\r\n                    </Col>\r\n                    <Col xs={4}>                        \r\n                        <Button variant=\"primary\" onClick={this.handleSubmit}>\r\n                            Send!\r\n                        </Button>\r\n                    </Col>\r\n                    <Col xs={12}>\r\n                        <div className=\"green\">{this.state.messageRate}</div>\r\n                    </Col>\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nRecipeScore.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default RecipeScore;","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Ingredients extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        const { ingredients } = this.props\r\n        this.state = ({\r\n            servings: 1,\r\n            ingredients\r\n        })\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({servings: event.target.value});\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Card.Text>\r\n                    Servings:\r\n                    <input type=\"number\" className=\"ml-2\" onChange={this.handleChange}/> \r\n                </Card.Text>\r\n                <Card.Body> \r\n                <Card.Text>To make this recipe you will need:</Card.Text>\r\n                    <ul>\r\n                        { this.state.ingredients.map((recipe) => <li key={recipe.name}>{`${recipe.quantity * this.state.servings} ${recipe.unit} of ${recipe.name}`}</li>)}\r\n                    </ul>\r\n                </Card.Body>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nIngredients.propTypes = {\r\n    ingredients: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default Ingredients;","const average = arr => {return (arr.reduce(( p, c ) => parseInt(p) + parseInt(c), 0 ) / arr.length).toFixed()}\r\nexport default average","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { Col } from 'react-flexbox-grid'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport RecipeScore from './RecipeScore'\r\nimport Ingredients from './Ingredients'\r\nimport average from '../../services/operations'\r\nimport ReactStarRating from \"react-star-ratings-component\";\r\nimport './styles.css'\r\n\r\nclass Recipe extends Component {\r\n\r\n    constructor(props){\r\n        super(props)\r\n        const { name, ingredients, imageURL, steps, calification, _id } = props.recipe\r\n\r\n        this.state = {\r\n            showModal: false,\r\n            id: _id,\r\n            name,\r\n            ingredients,\r\n            imageURL,\r\n            steps,\r\n            calification: average(calification),\r\n            servings: 1\r\n        }\r\n\r\n    }\r\n\r\n    handleModal(showModal){\r\n        this.setState( { showModal })\r\n    }\r\n    \r\n\r\n    render() {\r\n        const {imageURL, name, ingredients, showModal, calification, steps, id, servings} = this.state\r\n        return (\r\n            <>\r\n                <Col xs={12} sm={4}>\r\n                    <Card className=\"mb-4\">\r\n                        <Card.Img variant=\"top\" src={imageURL} />\r\n                        <Card.Body>\r\n                            <Card.Title>{ name }</Card.Title>\r\n\r\n                            <Ingredients ingredients={ingredients} servings={servings}></Ingredients>\r\n                            <Button variant=\"primary\" className=\"mr-3\" onClick={() => {this.handleModal(true)}}>See Steps</Button>\r\n                            <ReactStarRating\r\n                                numberOfStar={5}\r\n                                numberOfSelectedStar={calification}\r\n                                colorEmptyStar=\"#AAA\"\r\n                                starSize=\"35px\"\r\n                                spaceBetweenStar=\"10px\"\r\n                                />\r\n                        </Card.Body>\r\n                    </Card>\r\n                </Col>\r\n\r\n                {/* Modal */}\r\n                <Modal show={showModal} size=\"lg\">\r\n                    <Modal.Header>\r\n                        <h2>{name}</h2>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        <p>Steps:</p>\r\n                        <p>{steps}</p>\r\n                        <hr/>\r\n                        <p>Did you like this recipe? <b>Rate it!</b></p>\r\n                        <RecipeScore id={id} onRate={this.handleModal}></RecipeScore>\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"primary\" className=\"mr-3\" onClick={() => {this.handleModal(false)}}>Close</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                {/* End modal */}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nRecipe.propTypes = {\r\n    recipe: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        ingredients: PropTypes.array.isRequired,\r\n        imageURL: PropTypes.string.isRequired,\r\n        steps: PropTypes.string.isRequired,\r\n        calification: PropTypes.array.isRequired,\r\n        _id: PropTypes.string.isRequired,\r\n      })\r\n};\r\n\r\nexport default Recipe;","import React, { Component } from 'react';\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Recipe from '../Recipe'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RecipeList extends Component {\r\n    render() {\r\n        const {data} = this.props\r\n        return (\r\n            <>\r\n                { data && data.recipes ? data.recipes.map((recipe) => ( <Recipe recipe={recipe} key={recipe.name}></Recipe> )) : <CircularProgress size={80} /> }\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nRecipeList.propTypes = {\r\n     data: PropTypes.shape({\r\n         recipes: PropTypes.array,\r\n       })\r\n  };\r\n\r\nexport default RecipeList;","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form'\r\nimport PropTypes from 'prop-types';\r\n\r\nclass RecipeSearch extends Component {\r\n\r\n    render() {\r\n        const {searchRecipes} = this.props\r\n        return (\r\n            <Form>\r\n                <Form.Group>\r\n                    <Form.Label>Search</Form.Label>\r\n                    <Form.Control type=\"text\" placeholder=\"Search recipes\" onChange={searchRecipes} />\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nRecipeSearch.propTypes = {\r\n    searchRecipes: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default RecipeSearch;","import { url_base_api_recipe } from '../constants/api_url'\r\n\r\nconst getRecipesUrl = (textToSearch) => {\r\n    if (textToSearch)\r\n        return `${url_base_api_recipe}/recipes/${textToSearch}`\r\n\r\n    return `${url_base_api_recipe}/recipes`\r\n}\r\n\r\nexport default getRecipesUrl","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Col, Row} from 'react-flexbox-grid'\r\n\r\nclass RecipeSearchButtons extends Component {\r\n    render() {\r\n        const {searchRecipesByRate} = this.props\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col xs={12} sm={2}>\r\n                        <button className=\"btn btn-success mr-3 mb-2 btn-block\" onClick={() => searchRecipesByRate([4, 5])}>Best Recipes</button>\r\n                    </Col>\r\n                    <Col xs={12} sm={2}>\r\n                        <button className=\"btn btn-danger mr-3 mb-2 btn-block\" onClick={() => searchRecipesByRate([1, 2, 3])}>Worst Recipes</button>\r\n                    </Col>\r\n                    <Col xs={12} sm={2}>\r\n                        <button className=\"btn btn-primary mb-2 btn-block\" onClick={() => searchRecipesByRate([1, 2, 3, 4, 5])}>All scored recipes</button>\r\n                    </Col>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nRecipeSearchButtons.propTypes = {\r\n    searchRecipesByRate: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default RecipeSearchButtons;","import React, { Component } from 'react';\r\nimport RecipeList from '../RecipeList'\r\nimport RecipeSearch from '../RecipeSearch'\r\nimport { Col, Row} from 'react-flexbox-grid'\r\nimport average from '../../services/operations'\r\nimport getRecipesUrl from '../../services/getRecipesUrl'\r\nimport RecipeSearchButtons from './../RecipeSearchButtons'\r\n\r\nclass Recipes extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            data: {}\r\n        }\r\n        this.searchRecipesByRate = this.searchRecipesByRate.bind(this)\r\n    }\r\n\r\n    searchRecipes = (e) => {\r\n        fetch(getRecipesUrl(e.target.value)).then( resolve => {\r\n            return resolve.json()\r\n        }).then(data => {\r\n            this.setState({\r\n                data\r\n            })\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(getRecipesUrl()).then( resolve => {\r\n            return resolve.json()\r\n        }).then(data => {\r\n            this.setState({\r\n                data\r\n            })\r\n        })\r\n    }\r\n\r\n    searchRecipesByRate (ary) {\r\n        let dataResult = []\r\n\r\n        fetch(getRecipesUrl()).then( resolve => {\r\n            return resolve.json()\r\n        }).then(data => {\r\n            \r\n            data.recipes.map(recipe => \r\n            {\r\n                if (ary.includes(parseInt(average(recipe.calification))))\r\n                    dataResult.push(recipe)\r\n                \r\n                return null\r\n            })\r\n            \r\n            data.recipes = dataResult\r\n\r\n            this.setState({\r\n                data\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.state\r\n        return (\r\n            <>\r\n                <Row>\r\n                    <Col md={12}>\r\n                        <RecipeSearch searchRecipes={this.searchRecipes}></RecipeSearch>\r\n                        <RecipeSearchButtons searchRecipesByRate={this.searchRecipesByRate}></RecipeSearchButtons>\r\n                    </Col>\r\n                </Row>\r\n                <hr />\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <h2 className=\"mb-3 mt-4\">List of recipes</h2>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <RecipeList data={data}></RecipeList>\r\n                </Row>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Recipes;","import React from 'react';\nimport logo from './logo.svg';\nimport Container from 'react-bootstrap/Container'\nimport RecipesScreen from './Components/RecipesScreen'\nimport { Col, Row} from 'react-flexbox-grid'\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        \n          <Container>\n              <Row className=\"text-center\">\n                <Col xs={12}>\n                  <div className=\"jumbotron\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1>Welcome to <b>Recipe App</b></h1>\n                    <p>All you need is a good recipe!</p>\n                  </div>\n                </Col>\n              </Row>\n              <RecipesScreen></RecipesScreen>\n          </Container>\n\n          <div className=\"footer text-center\">\n              <p className=\"pt-2\">Made with <span className=\"red\">❤</span> by <a href=\"https://www.linkedin.com/in/matias-azcui-1367b086/\">MatiasF.Azcui</a></p>\n          </div>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}